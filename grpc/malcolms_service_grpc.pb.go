// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc/malcolms_service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MalcolmSamplerClient is the client API for MalcolmSampler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MalcolmSamplerClient interface {
	// AddBoundaries registers boundaries of a parameter space.
	//
	// It returns the UUID to refer to these boundaries.
	AddBoundaries(ctx context.Context, in *Boundaries, opts ...grpc.CallOption) (*BoundariesUUID, error)
	// AddPosterior registers posterior values sampled from the true posterior.
	//
	// The sampling problem starts recording when the first sample is streamed.
	// It finishes when the stream is closed and an identification token is returned.
	//
	// This rpc expects samples in batches.
	//
	// Whether it accepts a fraction of a point in a batch is implementation-specific.
	AddPosterior(ctx context.Context, opts ...grpc.CallOption) (MalcolmSampler_AddPosteriorClient, error)
	// MakeSamples samples the requested number of points.
	//
	// Streams the generated points.
	//
	// Whether samples are batched in responses is implementation-specific.
	MakeSamples(ctx context.Context, in *MakeSamplesRequest, opts ...grpc.CallOption) (MalcolmSampler_MakeSamplesClient, error)
}

type malcolmSamplerClient struct {
	cc grpc.ClientConnInterface
}

func NewMalcolmSamplerClient(cc grpc.ClientConnInterface) MalcolmSamplerClient {
	return &malcolmSamplerClient{cc}
}

func (c *malcolmSamplerClient) AddBoundaries(ctx context.Context, in *Boundaries, opts ...grpc.CallOption) (*BoundariesUUID, error) {
	out := new(BoundariesUUID)
	err := c.cc.Invoke(ctx, "/grpc.MalcolmSampler/AddBoundaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malcolmSamplerClient) AddPosterior(ctx context.Context, opts ...grpc.CallOption) (MalcolmSampler_AddPosteriorClient, error) {
	stream, err := c.cc.NewStream(ctx, &MalcolmSampler_ServiceDesc.Streams[0], "/grpc.MalcolmSampler/AddPosterior", opts...)
	if err != nil {
		return nil, err
	}
	x := &malcolmSamplerAddPosteriorClient{stream}
	return x, nil
}

type MalcolmSampler_AddPosteriorClient interface {
	Send(*PosteriorValuesBatch) error
	CloseAndRecv() (*PosteriorUUID, error)
	grpc.ClientStream
}

type malcolmSamplerAddPosteriorClient struct {
	grpc.ClientStream
}

func (x *malcolmSamplerAddPosteriorClient) Send(m *PosteriorValuesBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *malcolmSamplerAddPosteriorClient) CloseAndRecv() (*PosteriorUUID, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PosteriorUUID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *malcolmSamplerClient) MakeSamples(ctx context.Context, in *MakeSamplesRequest, opts ...grpc.CallOption) (MalcolmSampler_MakeSamplesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MalcolmSampler_ServiceDesc.Streams[1], "/grpc.MalcolmSampler/MakeSamples", opts...)
	if err != nil {
		return nil, err
	}
	x := &malcolmSamplerMakeSamplesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MalcolmSampler_MakeSamplesClient interface {
	Recv() (*SamplesBatch, error)
	grpc.ClientStream
}

type malcolmSamplerMakeSamplesClient struct {
	grpc.ClientStream
}

func (x *malcolmSamplerMakeSamplesClient) Recv() (*SamplesBatch, error) {
	m := new(SamplesBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MalcolmSamplerServer is the server API for MalcolmSampler service.
// All implementations must embed UnimplementedMalcolmSamplerServer
// for forward compatibility
type MalcolmSamplerServer interface {
	// AddBoundaries registers boundaries of a parameter space.
	//
	// It returns the UUID to refer to these boundaries.
	AddBoundaries(context.Context, *Boundaries) (*BoundariesUUID, error)
	// AddPosterior registers posterior values sampled from the true posterior.
	//
	// The sampling problem starts recording when the first sample is streamed.
	// It finishes when the stream is closed and an identification token is returned.
	//
	// This rpc expects samples in batches.
	//
	// Whether it accepts a fraction of a point in a batch is implementation-specific.
	AddPosterior(MalcolmSampler_AddPosteriorServer) error
	// MakeSamples samples the requested number of points.
	//
	// Streams the generated points.
	//
	// Whether samples are batched in responses is implementation-specific.
	MakeSamples(*MakeSamplesRequest, MalcolmSampler_MakeSamplesServer) error
	mustEmbedUnimplementedMalcolmSamplerServer()
}

// UnimplementedMalcolmSamplerServer must be embedded to have forward compatible implementations.
type UnimplementedMalcolmSamplerServer struct {
}

func (UnimplementedMalcolmSamplerServer) AddBoundaries(context.Context, *Boundaries) (*BoundariesUUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBoundaries not implemented")
}
func (UnimplementedMalcolmSamplerServer) AddPosterior(MalcolmSampler_AddPosteriorServer) error {
	return status.Errorf(codes.Unimplemented, "method AddPosterior not implemented")
}
func (UnimplementedMalcolmSamplerServer) MakeSamples(*MakeSamplesRequest, MalcolmSampler_MakeSamplesServer) error {
	return status.Errorf(codes.Unimplemented, "method MakeSamples not implemented")
}
func (UnimplementedMalcolmSamplerServer) mustEmbedUnimplementedMalcolmSamplerServer() {}

// UnsafeMalcolmSamplerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MalcolmSamplerServer will
// result in compilation errors.
type UnsafeMalcolmSamplerServer interface {
	mustEmbedUnimplementedMalcolmSamplerServer()
}

func RegisterMalcolmSamplerServer(s grpc.ServiceRegistrar, srv MalcolmSamplerServer) {
	s.RegisterService(&MalcolmSampler_ServiceDesc, srv)
}

func _MalcolmSampler_AddBoundaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Boundaries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalcolmSamplerServer).AddBoundaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MalcolmSampler/AddBoundaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalcolmSamplerServer).AddBoundaries(ctx, req.(*Boundaries))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalcolmSampler_AddPosterior_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MalcolmSamplerServer).AddPosterior(&malcolmSamplerAddPosteriorServer{stream})
}

type MalcolmSampler_AddPosteriorServer interface {
	SendAndClose(*PosteriorUUID) error
	Recv() (*PosteriorValuesBatch, error)
	grpc.ServerStream
}

type malcolmSamplerAddPosteriorServer struct {
	grpc.ServerStream
}

func (x *malcolmSamplerAddPosteriorServer) SendAndClose(m *PosteriorUUID) error {
	return x.ServerStream.SendMsg(m)
}

func (x *malcolmSamplerAddPosteriorServer) Recv() (*PosteriorValuesBatch, error) {
	m := new(PosteriorValuesBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MalcolmSampler_MakeSamples_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MakeSamplesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MalcolmSamplerServer).MakeSamples(m, &malcolmSamplerMakeSamplesServer{stream})
}

type MalcolmSampler_MakeSamplesServer interface {
	Send(*SamplesBatch) error
	grpc.ServerStream
}

type malcolmSamplerMakeSamplesServer struct {
	grpc.ServerStream
}

func (x *malcolmSamplerMakeSamplesServer) Send(m *SamplesBatch) error {
	return x.ServerStream.SendMsg(m)
}

// MalcolmSampler_ServiceDesc is the grpc.ServiceDesc for MalcolmSampler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MalcolmSampler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MalcolmSampler",
	HandlerType: (*MalcolmSamplerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBoundaries",
			Handler:    _MalcolmSampler_AddBoundaries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddPosterior",
			Handler:       _MalcolmSampler_AddPosterior_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MakeSamples",
			Handler:       _MalcolmSampler_MakeSamples_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/malcolms_service.proto",
}
