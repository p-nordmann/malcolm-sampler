// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc/malcolms_service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppraiserClient is the client API for Appraiser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppraiserClient interface {
	// PutBoundaries registers boundaries that problems can be made of.
	// It returns an UUID that will be required by the rpc RegisterTrueSamples.
	PutBoundaries(ctx context.Context, in *Boundaries, opts ...grpc.CallOption) (*UUID, error)
	// RegisterTrueSamples registers posterior values sampled from the true posterior.
	// The sampling problem starts recording when the first sample is streamed.
	// It finishes when the stream is closed and an identification token is returned.
	RegisterTrueSamples(ctx context.Context, opts ...grpc.CallOption) (Appraiser_RegisterTrueSamplesClient, error)
	// WalkFrom requests to perform one walk from a requested point for a requested number of steps.
	//
	// Returns the generated points.
	Walk(ctx context.Context, in *WalkRequest, opts ...grpc.CallOption) (Appraiser_WalkClient, error)
}

type appraiserClient struct {
	cc grpc.ClientConnInterface
}

func NewAppraiserClient(cc grpc.ClientConnInterface) AppraiserClient {
	return &appraiserClient{cc}
}

func (c *appraiserClient) PutBoundaries(ctx context.Context, in *Boundaries, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/grpc.Appraiser/PutBoundaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appraiserClient) RegisterTrueSamples(ctx context.Context, opts ...grpc.CallOption) (Appraiser_RegisterTrueSamplesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Appraiser_ServiceDesc.Streams[0], "/grpc.Appraiser/RegisterTrueSamples", opts...)
	if err != nil {
		return nil, err
	}
	x := &appraiserRegisterTrueSamplesClient{stream}
	return x, nil
}

type Appraiser_RegisterTrueSamplesClient interface {
	Send(*TrueSamples) error
	CloseAndRecv() (*UUID, error)
	grpc.ClientStream
}

type appraiserRegisterTrueSamplesClient struct {
	grpc.ClientStream
}

func (x *appraiserRegisterTrueSamplesClient) Send(m *TrueSamples) error {
	return x.ClientStream.SendMsg(m)
}

func (x *appraiserRegisterTrueSamplesClient) CloseAndRecv() (*UUID, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UUID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appraiserClient) Walk(ctx context.Context, in *WalkRequest, opts ...grpc.CallOption) (Appraiser_WalkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Appraiser_ServiceDesc.Streams[1], "/grpc.Appraiser/Walk", opts...)
	if err != nil {
		return nil, err
	}
	x := &appraiserWalkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Appraiser_WalkClient interface {
	Recv() (*Samples, error)
	grpc.ClientStream
}

type appraiserWalkClient struct {
	grpc.ClientStream
}

func (x *appraiserWalkClient) Recv() (*Samples, error) {
	m := new(Samples)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppraiserServer is the server API for Appraiser service.
// All implementations must embed UnimplementedAppraiserServer
// for forward compatibility
type AppraiserServer interface {
	// PutBoundaries registers boundaries that problems can be made of.
	// It returns an UUID that will be required by the rpc RegisterTrueSamples.
	PutBoundaries(context.Context, *Boundaries) (*UUID, error)
	// RegisterTrueSamples registers posterior values sampled from the true posterior.
	// The sampling problem starts recording when the first sample is streamed.
	// It finishes when the stream is closed and an identification token is returned.
	RegisterTrueSamples(Appraiser_RegisterTrueSamplesServer) error
	// WalkFrom requests to perform one walk from a requested point for a requested number of steps.
	//
	// Returns the generated points.
	Walk(*WalkRequest, Appraiser_WalkServer) error
	mustEmbedUnimplementedAppraiserServer()
}

// UnimplementedAppraiserServer must be embedded to have forward compatible implementations.
type UnimplementedAppraiserServer struct {
}

func (UnimplementedAppraiserServer) PutBoundaries(context.Context, *Boundaries) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBoundaries not implemented")
}
func (UnimplementedAppraiserServer) RegisterTrueSamples(Appraiser_RegisterTrueSamplesServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterTrueSamples not implemented")
}
func (UnimplementedAppraiserServer) Walk(*WalkRequest, Appraiser_WalkServer) error {
	return status.Errorf(codes.Unimplemented, "method Walk not implemented")
}
func (UnimplementedAppraiserServer) mustEmbedUnimplementedAppraiserServer() {}

// UnsafeAppraiserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppraiserServer will
// result in compilation errors.
type UnsafeAppraiserServer interface {
	mustEmbedUnimplementedAppraiserServer()
}

func RegisterAppraiserServer(s grpc.ServiceRegistrar, srv AppraiserServer) {
	s.RegisterService(&Appraiser_ServiceDesc, srv)
}

func _Appraiser_PutBoundaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Boundaries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppraiserServer).PutBoundaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Appraiser/PutBoundaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppraiserServer).PutBoundaries(ctx, req.(*Boundaries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appraiser_RegisterTrueSamples_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppraiserServer).RegisterTrueSamples(&appraiserRegisterTrueSamplesServer{stream})
}

type Appraiser_RegisterTrueSamplesServer interface {
	SendAndClose(*UUID) error
	Recv() (*TrueSamples, error)
	grpc.ServerStream
}

type appraiserRegisterTrueSamplesServer struct {
	grpc.ServerStream
}

func (x *appraiserRegisterTrueSamplesServer) SendAndClose(m *UUID) error {
	return x.ServerStream.SendMsg(m)
}

func (x *appraiserRegisterTrueSamplesServer) Recv() (*TrueSamples, error) {
	m := new(TrueSamples)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Appraiser_Walk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WalkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppraiserServer).Walk(m, &appraiserWalkServer{stream})
}

type Appraiser_WalkServer interface {
	Send(*Samples) error
	grpc.ServerStream
}

type appraiserWalkServer struct {
	grpc.ServerStream
}

func (x *appraiserWalkServer) Send(m *Samples) error {
	return x.ServerStream.SendMsg(m)
}

// Appraiser_ServiceDesc is the grpc.ServiceDesc for Appraiser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Appraiser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Appraiser",
	HandlerType: (*AppraiserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutBoundaries",
			Handler:    _Appraiser_PutBoundaries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterTrueSamples",
			Handler:       _Appraiser_RegisterTrueSamples_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Walk",
			Handler:       _Appraiser_Walk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/malcolms_service.proto",
}
